import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import styles from "./styles/login.module.css";
import { RefreshCcw } from 'lucide-react';

const Login = () => {
    const [showPassword, setShowPassword] = useState(false);
    const [captchaCode, setCaptchaCode] = useState("7B4K9");
    const navigate = useNavigate();
    const [loading, setLoading] = useState(false);

    const [formData, setFormData] = useState({
        email: "",
        password: "",
        captcha: "",
        remember: false,
    });

    const generateCaptcha = () => {
        const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        let captcha = "";
        for (let i = 0; i < 5; i++) {
            captcha += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return captcha;
    };

    const handleCaptchaRefresh = () => {
        setCaptchaCode(generateCaptcha());
    };

    const togglePassword = () => {
        setShowPassword(!showPassword);
    };

    const handleInputChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: type === "checkbox" ? checked : value,
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (formData.captcha !== captchaCode) {
            alert("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞");
            return;
        }

        setLoading(true);
        try {
            const res = await fetch(`${import.meta.env.VITE_API_URL}/auth/login`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    email: formData.email,
                    password: formData.password,
                }),
            });

            const data = await res.json();

            if (!res.ok) {
                alert(data.error || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
            } else {
                localStorage.setItem("token", data.token);

                if (!formData.remember) {
                    sessionStorage.setItem("token", data.token);
                }

                alert("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!");
                navigate("/orderPanel"); // —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –≤ –ø–∞–Ω–µ–ª—å –∑–∞–∫–∞–∑–æ–≤
            }
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", err);
            alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className={styles.authContainer}>
            <div className={styles.authBlock}>
                <div className={styles.logoSection}>
                    <div className={styles.logo}>
                        <div className={styles.logoIcon}>
                            <svg viewBox="0 0 24 24" width="32" height="32">
                                <path
                                    fill="currentColor"
                                    d="M12 2L2 7L12 12L22 7L12 2M2 17L12 22L22 17M2 12L12 17L22 12"
                                />
                            </svg>
                        </div>
                        <span className={styles.logoText}>DeliveryApp</span>
                    </div>
                    <p className={styles.authSubtitle}>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–æ–π</p>
                </div>

                <div className={styles.authCard}>
                    <div className={styles.authHeader}>
                        <h2 className={styles.authTitle}>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
                        <p className={styles.authDescription}>
                            –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç
                        </p>
                    </div>

                    <form onSubmit={handleSubmit}>
                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>Email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω</label>
                            <input
                                type="text"
                                name="email"
                                className={styles.formInput}
                                placeholder="example@mail.com –∏–ª–∏ +37127424725"
                                value={formData.email}
                                onChange={handleInputChange}
                            />
                        </div>

                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>–ü–∞—Ä–æ–ª—å</label>
                            <div className={styles.inputWithIcon}>
                                <input
                                    type={showPassword ? "text" : "password"}
                                    name="password"
                                    className={styles.formInput}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                                    value={formData.password}
                                    onChange={handleInputChange}
                                />
                                <button
                                    type="button"
                                    className={styles.passwordToggle}
                                    onClick={togglePassword}
                                    aria-label={showPassword ? "–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å"}
                                >
                                    {showPassword ? "üôà" : "üëÅÔ∏è"}
                                </button>
                            </div>
                        </div>

                        {/* –ö–∞–ø—á–∞ */}
                        <div className={styles.captchaContainer}>
                            <span className={styles.captchaCode}>{captchaCode}</span>
                            <button
                                type="button"
                                className={styles.captchaRefresh}
                                onClick={handleCaptchaRefresh}
                            >
                                <RefreshCcw size={24}/>
                            </button>
                            <input
                                type="text"
                                name="captcha"
                                className={styles.formInput}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥"
                                value={formData.captcha}
                                onChange={handleInputChange}
                            />
                        </div>

                        <div className={styles.formCheckbox}>
                            <input
                                type="checkbox"
                                id="remember"
                                name="remember"
                                checked={formData.remember}
                                onChange={handleInputChange}
                            />
                            <label htmlFor="remember">–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è</label>
                        </div>

                        {/* –ö–Ω–æ–ø–∫–∞ */}
                        <button
                            type="submit"
                            className={styles.btnPrimary}
                            disabled={loading}
                        >
                            {loading ? "–í—Ö–æ–¥–∏–º..." : "–í–æ–π—Ç–∏"}
                        </button>
                    </form>

                    <div className={styles.authFooter}>
                        –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{" "}
                        <a href="#" onClick={() => navigate("/registration")}>
                            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                        </a>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Login;
